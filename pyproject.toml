[project]
name = "gdal-binary"
dynamic = ["version"]
description = "GDAL binary wheels"
authors = [
  { name = "Jiri Klic", email = "web@jiriklic.com" },
]
requires-python = ">=3.8,<3.13"
readme = "README.md"
keywords = ["gis", "raster", "vector"]
license = {text = "MIT"}
classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: C",
  "Programming Language :: C++",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Information Analysis",
]

[build-system]
requires = ["meson-python", "pybind11"]
build-backend = "mesonpy"

[project.optional-dependencies]
test = ["pytest"]
dev = [
  "meson",
  "ninja",
  "cibuildwheel",
  "pybind11"
]

[tool.pytest.ini_options]
minversion = "8.3"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore:(ast.Str|Attribute s|ast.NameConstant|ast.Num) is deprecated:DeprecationWarning:_pytest",  # Python 3.12
]
testpaths = ["tests"]

[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*universal2:arm64"]
skip = "cp*-manylinux_x86_64"  # Skip manylinux builds when musllinux is available
build = ["cp*-musllinux_x86_64", "cp*-manylinux_x86_64", "cp*-macosx_*", "cp*-win_amd64"]

# build-verbosity = 3
config-settings = "build-dir=/project/build"
# multiple configs
# config-settings = "build-dir=/project/build, setup-args=-Doption=true, compile-args=-j6"

# environment = {MESONPY_EXPERIMENTAL_NO_CLEAN ="1", MESONPY_VERBOSE = "1"}
build-frontend = "build"


# musllinux-specific settings
[[tool.cibuildwheel.overrides]]
select = "cp*-musllinux*"
before-all = [
  """
  apk add sqlite-dev curl-dev expat-dev zlib-dev \
  tiff-dev libpng-dev libgeotiff-dev libjpeg-turbo-dev geos-dev \
  sqlite sqlite-dev libgeotiff-dev tiff-dev
  """,
]
environment.CURL_LIBRARY = "/usr/lib/libcurl.so"
environment.CURL_INCLUDE_DIR = "/usr/include/curl"
environment.MESON_ARGS = "-Dcurl=enabled"


# Linux-specific settings (manylinux)
[[tool.cibuildwheel.overrides]]
select = "cp*-manylinux*"
before-all = [
  """
  yum install -y sqlite-devel curl curl-devel expat-devel zlib-devel \
  libtiff-devel libpng-devel libgeotiff-devel libjpeg-turbo-devel geos-devel \
  sqlite sqlite-devel libgeotiff-devel libtiff-devel
  """,
]
environment.CURL_LIBRARY = "/usr/lib64/libcurl.so"
environment.CURL_INCLUDE_DIR = "/usr/include/curl"
environment.MESON_ARGS = "-Dcurl=enabled"


# macOS-specific settings
[[tool.cibuildwheel.overrides]]
select = "cp*-macosx*"
before-all = [
  """
  brew install sqlite curl expat zlib libtiff libpng jpeg geos \
  openssl libxml2 json-c netcdf hdf5 cfitsio qhull freexl libkml poppler webp
  """,
]
environment.CURL_LIBRARY = "/usr/local/opt/curl/lib/libcurl.dylib"
environment.CURL_INCLUDE_DIR = "/usr/local/opt/curl/include"
environment.MESON_ARGS = "-Dcurl=enabled"


# Windows-specific settings
[[tool.cibuildwheel.overrides]]
select = "cp*-win*"
before-all = [
  """
  choco install -y sqlite curl expat zlib libtiff libpng jpeg geos \
  openssl libxml2 json-c netcdf hdf5 cfitsio qhull freexl libkml poppler webp
  """,
]
environment.CURL_LIBRARY = "C:\\Program Files\\curl\\lib\\libcurl.lib"
environment.CURL_INCLUDE_DIR = "C:\\Program Files\\curl\\include"
environment.MESON_ARGS = "-Dcurl=enabled"
